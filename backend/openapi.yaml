openapi: 3.0.3
info:
  title: Hitas Helsinki APIs
  version: 1.0.0
  description: API definitions for Hitas Helsinki project.
paths:
  /api/v1/housing-companies:
    get:
      description: Fetch housing companies
      operationId: list-housing-companies
      tags:
        - Housing companies
      parameters:
        - $ref: '#/components/parameters/PagingLimitParameter'
        - $ref: '#/components/parameters/PagingPageParameter'
        - name: display_name
          description: Search housing companies with display name containing the given search string (case-insensitive)
          required: false
          in: query
          schema:
            type: string
            example: helmi
        - name: street_address
          description: Search housing companies with street address containing the given search string (case-insensitive)
          required: false
          in: query
          schema:
            type: string
            example: Hannunkatu
        - name: postal_code
          description: Search housing companies located in given postal code
          required: false
          in: query
          schema:
            type: string
            example: "00100"
        - name: developer
          description: Search housing companies with developer name containing the given search string (case-insensitive)
          required: false
          in: query
          schema:
            type: string
            example: Rakennuttaja
        - name: property_manager
          description: Search housing companies with property manager name matching to the given search string (case-insensitive)
          required: false
          in: query
          schema:
            type: string
            example: isännöinti
      responses:
        '200':
          description: Successfully fetched list of housing companies
          content:
            application/json:
              schema:
                description: Single page of housing companies
                type: object
                required:
                  - page
                  - contents
                properties:
                  page:
                    $ref: '#/components/schemas/PageInfo'
                  contents:
                    description: List of housing companies
                    type: array
                    items:
                      $ref: '#/components/schemas/HousingCompany'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      description: Add a new housing company
      operationId: create-housing-company
      tags:
        - Housing companies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HousingCompanyDetails'
      responses:
        '201':
          description: Successfully added a new housing company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HousingCompanyDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/housing-companies/{housing_company_id}:
    get:
      description: Fetch a single housing company by id
      operationId: read-housing-company
      tags:
        - Housing companies
      parameters:
        - name: housing_company_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '200':
          description: Successfully read a housing company details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HousingCompanyDetails'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      description: Update a housing company
      operationId: update-housing-company
      tags:
        - Housing companies
      parameters:
        - name: housing_company_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HousingCompanyDetails'
      responses:
        '200':
          description: Successfully updated a housing company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HousingCompanyDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      description: Remove a housing company
      operationId: delete-housing-company
      tags:
        - Housing companies
      parameters:
        - name: housing_company_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '204':
          description: Housing company successfully removed.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/housing-companies/{housing_company_id}/real-estates:
    get:
      description: Fetch real estates for a housing company
      operationId: list-housing-company-real-estates
      tags:
        - Real estates
      parameters:
        - name: housing_company_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
        - $ref: '#/components/parameters/PagingLimitParameter'
        - $ref: '#/components/parameters/PagingPageParameter'
      responses:
        '200':
          description: Successfully fetched list of real estates
          content:
            application/json:
              schema:
                description: Single page of real estates
                type: object
                required:
                  - page
                  - contents
                properties:
                  page:
                    $ref: '#/components/schemas/PageInfo'
                  contents:
                    description: List of real estates
                    type: array
                    items:
                      $ref: '#/components/schemas/RealEstate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      description: Add a new real estate for a housing company
      operationId: create-housing-company-real-estate
      tags:
        - Real estates
      parameters:
        - name: housing_company_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealEstate'
      responses:
        '201':
          description: Successfully added a new real estate for a housing company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RealEstate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/housing-companies/{housing_company_id}/real-estates/{real_estate_id}:
    get:
      description: Fetch a single housing company by id
      operationId: read-housing-company-real-estate
      tags:
        - Real estates
      parameters:
        - name: housing_company_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
        - name: real_estate_id
          required: true
          in: path
          description: Real estate ID
          schema:
            type: string
            example: c86eaa399ce141d89d962d46bb81ab2b
      responses:
        '200':
          description: Successfully read a housing company's real estate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RealEstate'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      description: Update a real estate for a housing company
      operationId: update-housing-company-real-estate
      tags:
        - Real estates
      parameters:
        - name: housing_company_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
        - name: real_estate_id
          required: true
          in: path
          description: Real estate ID
          schema:
            type: string
            example: c86eaa399ce141d89d962d46bb81ab2b
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealEstate'
      responses:
        '200':
          description: Successfully updated an existing real estate for a housing company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RealEstate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      description: Remove a real estate from a housing company
      operationId: delete-housing-company-real-estate
      tags:
        - Real estates
      parameters:
        - name: housing_company_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
        - name: real_estate_id
          required: true
          in: path
          description: Real estate ID
          schema:
            type: string
            example: c86eaa399ce141d89d962d46bb81ab2b
      responses:
        '204':
          description: Real estate successfully removed.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/housing-companies/{housing_company_id}/real-estates/{real_estate_id}/buildings:
    get:
      description: Fetch buildings for a housing company's real estate
      operationId: list-housing-company-real-estates-buildings
      tags:
        - Buildings
      parameters:
        - name: housing_company_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
        - name: real_estate_id
          required: true
          in: path
          description: Real estate ID
          schema:
            type: string
            example: c86eaa399ce141d89d962d46bb81ab2b
        - $ref: '#/components/parameters/PagingLimitParameter'
        - $ref: '#/components/parameters/PagingPageParameter'
      responses:
        '200':
          description: Successfully fetched list of buildings
          content:
            application/json:
              schema:
                description: Single page of buildings
                type: object
                required:
                  - page
                  - contents
                properties:
                  page:
                    $ref: '#/components/schemas/PageInfo'
                  contents:
                    description: List of buildings
                    type: array
                    items:
                      $ref: '#/components/schemas/Building'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      description: Add a new building for a housing company's real estate
      operationId: create-housing-company-real-estate-building
      tags:
        - Buildings
      parameters:
        - name: housing_company_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
        - name: real_estate_id
          required: true
          in: path
          description: Real estate ID
          schema:
            type: string
            example: c86eaa399ce141d89d962d46bb81ab2b
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      responses:
        '201':
          description: Successfully added a new building for a housing company real estate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/housing-companies/{housing_company_id}/real-estates/{real_estate_id}/buildings/{building_id}:
    get:
      description: Fetch a single housing company by id
      operationId: read-housing-company-real-estate-building
      tags:
        - Buildings
      parameters:
        - name: housing_company_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
        - name: real_estate_id
          required: true
          in: path
          description: Real estate ID
          schema:
            type: string
            example: c86eaa399ce141d89d962d46bb81ab2b
        - name: building_id
          required: true
          in: path
          description: Building ID
          schema:
            type: string
            example: dc1072975bab4ba69f64814f021c6785
      responses:
        '200':
          description: Successfully read a building details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      description: Update a building for a housing company's real estate
      operationId: update-housing-company-real-estate-building
      tags:
        - Buildings
      parameters:
        - name: housing_company_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
        - name: real_estate_id
          required: true
          in: path
          description: Real estate ID
          schema:
            type: string
            example: c86eaa399ce141d89d962d46bb81ab2b
        - name: building_id
          required: true
          in: path
          description: Building ID
          schema:
            type: string
            example: dc1072975bab4ba69f64814f021c6785
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      responses:
        '200':
          description: Successfully updated an existing building for a housing company's real estate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      description: Remove a building from from a housing company's real estate
      operationId: delete-housing-company-real-estate-building
      tags:
        - Buildings
      parameters:
        - name: housing_company_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
        - name: real_estate_id
          required: true
          in: path
          description: Real estate ID
          schema:
            type: string
            example: c86eaa399ce141d89d962d46bb81ab2b
        - name: building_id
          required: true
          in: path
          description: Building ID
          schema:
            type: string
            example: dc1072975bab4ba69f64814f021c6785
      responses:
        '204':
          description: Building successfully removed.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /api/v1/apartments:
    get:
      description: Fetch apartments
      operationId: list-apartments
      tags:
        - Apartments
      parameters:
        - $ref: '#/components/parameters/PagingLimitParameter'
        - $ref: '#/components/parameters/PagingPageParameter'
        - name: housing_company
          description: Search apartments that belong to housing company with given id
          required: false
          in: query
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
        - name: housing_company_name
          description: Search apartments that belong to housing companies with display name containing the given search string (case-insensitive)
          required: false
          in: query
          schema:
            type: string
            example: helmi
        - name: street_address
          description: Search apartments with street address containing the given search string (case-insensitive)
          required: false
          in: query
          schema:
            type: string
            example: Hannunkatu
        - name: postal_code
          description: Search apartments located in given postal code
          required: false
          in: query
          schema:
            type: string
            example: "00100"
        - name: owner_name
          description: Search apartments whose owner first name or last name contains the given search string (case-insensitive)
          required: false
          in: query
          schema:
            type: string
            example: matti
        - name: owner_social_security_number
          description: Search apartments whose social security number matches the given search string (case-insensitive)
          required: false
          in: query
          schema:
            type: string
            example: 131052-308T
      responses:
        '200':
          description: Successfully fetched list of apartments
          content:
            application/json:
              schema:
                description: Single page of apartments
                type: object
                required:
                  - page
                  - contents
                properties:
                  page:
                    $ref: '#/components/schemas/PageInfo'
                  contents:
                    description: List of apartments
                    type: array
                    items:
                      $ref: '#/components/schemas/Apartment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      description: Add a new apartment
      operationId: create-apartment
      tags:
        - Apartments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Apartment'
      responses:
        '201':
          description: Successfully added a new apartment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/apartments/{apartment_id}:
    get:
      description: Fetch a single apartment by id
      operationId: read-apartment
      tags:
        - Apartments
      parameters:
        - name: apartment_id
          required: true
          in: path
          description: Apartment ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '200':
          description: Successfully read a apartment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentDetails'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      description: Update a apartment
      operationId: update-apartment
      tags:
        - Apartments
      parameters:
        - name: apartment_id
          required: true
          in: path
          description: Apartment ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApartmentDetails'
      responses:
        '200':
          description: Successfully updated a apartment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      description: Remove a apartment
      operationId: delete-apartment
      tags:
        - Apartments
      parameters:
        - name: apartment_id
          required: true
          in: path
          description: Apartment ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '204':
          description: Apartment successfully removed.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /api/v1/persons:
    get:
      description: Fetch persons
      operationId: list-persons
      tags:
        - Persons
      parameters:
        - $ref: '#/components/parameters/PagingLimitParameter'
        - $ref: '#/components/parameters/PagingPageParameter'
      responses:
        '200':
          description: Successfully fetched list of persons
          content:
            application/json:
              schema:
                description: Single page of persons
                type: object
                required:
                  - page
                  - contents
                properties:
                  page:
                    $ref: '#/components/schemas/PageInfo'
                  contents:
                    description: List of persons
                    type: array
                    items:
                      $ref: '#/components/schemas/Person'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      description: Add a new person
      operationId: create-person
      tags:
        - Persons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '201':
          description: Successfully added a new person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/persons/{person_id}:
    get:
      description: Fetch a single person by id
      operationId: read-person
      tags:
        - Persons
      parameters:
        - name: person_id
          required: true
          in: path
          description: Person ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '200':
          description: Successfully read a person details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      description: Update a person
      operationId: update-person
      tags:
        - Persons
      parameters:
        - name: person_id
          required: true
          in: path
          description: Person ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: Successfully updated a person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      description: Remove a person
      operationId: delete-person
      tags:
        - Persons
      parameters:
        - name: person_id
          required: true
          in: path
          description: Person ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '204':
          description: Person successfully removed.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /api/v1/property-managers:
    get:
      description: Fetch property managers
      operationId: list-property-managers
      tags:
        - Property managers
      parameters:
        - $ref: '#/components/parameters/PagingLimitParameter'
        - $ref: '#/components/parameters/PagingPageParameter'
      responses:
        '200':
          description: Successfully fetched list of property managers
          content:
            application/json:
              schema:
                description: Single page of property managers
                type: object
                required:
                  - page
                  - contents
                properties:
                  page:
                    $ref: '#/components/schemas/PageInfo'
                  contents:
                    description: List of property managers
                    type: array
                    items:
                      $ref: '#/components/schemas/PropertyManager'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      description: Add a new property manager
      operationId: create-property-manager
      tags:
        - Property managers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyManager'
      responses:
        '201':
          description: Successfully added a new property manager
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyManager'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/property-managers/{property_manager_id}:
    get:
      description: Fetch a single property manager by id
      operationId: read-property-manager
      tags:
        - Property managers
      parameters:
        - name: property_manager_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '200':
          description: Successfully read a property manager details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyManager'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      description: Update a property manager
      operationId: update-property-manager
      tags:
        - Property managers
      parameters:
        - name: property_manager_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyManager'
      responses:
        '200':
          description: Successfully updated a property manager
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyManager'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      description: Remove a property manager
      operationId: delete-property-manager
      tags:
        - Property managers
      parameters:
        - name: property_manager_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '204':
          description: Housing company successfully removed.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  # Codes

  /api/v1/developers:
    get:
      description: Fetch developers
      operationId: list-developers
      tags:
        - Developers
      parameters:
        - $ref: '#/components/parameters/PagingLimitParameter'
        - $ref: '#/components/parameters/PagingPageParameter'
      responses:
        '200':
          description: Successfully fetched list of developers
          content:
            application/json:
              schema:
                description: Single page of developers
                type: object
                required:
                  - page
                  - contents
                properties:
                  page:
                    $ref: '#/components/schemas/PageInfo'
                  contents:
                    description: List of developers
                    type: array
                    items:
                      $ref: '#/components/schemas/Code'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      description: Add a new developer
      operationId: create-developer
      tags:
        - Developers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Code'
      responses:
        '201':
          description: Successfully added a new developer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/developers/{developer_id}:
    get:
      description: Fetch a single developer by id
      operationId: read-developer
      tags:
        - Developers
      parameters:
        - name: developer_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '200':
          description: Successfully read a developer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      description: Update a developer
      operationId: update-developer
      tags:
        - Developers
      parameters:
        - name: developer_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Code'
      responses:
        '200':
          description: Successfully updated a developer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      description: Remove a developer
      operationId: delete-developer
      tags:
        - Developers
      parameters:
        - name: developer_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '204':
          description: Housing company successfully removed.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /api/v1/postal-codes:
    get:
      description: Fetch postal codes
      operationId: list-postal-codes
      tags:
        - Postal codes
      parameters:
        - $ref: '#/components/parameters/PagingLimitParameter'
        - $ref: '#/components/parameters/PagingPageParameter'
      responses:
        '200':
          description: Successfully fetched list of postal codes
          content:
            application/json:
              schema:
                description: Single page of postal codes
                type: object
                required:
                  - page
                  - contents
                properties:
                  page:
                    $ref: '#/components/schemas/PageInfo'
                  contents:
                    description: List of postal codes
                    type: array
                    items:
                      $ref: '#/components/schemas/HitasPostalCode'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      description: Add a new postal code
      operationId: create-postal-code
      tags:
        - Postal codes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HitasPostalCode'
      responses:
        '201':
          description: Successfully added a new postal code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HitasPostalCode'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/postal-codes/{postal_code_id}:
    get:
      description: Fetch a single postal code by id
      operationId: read-postal-code
      tags:
        - Postal codes
      parameters:
        - name: postal_code_id
          required: true
          in: path
          description: Postal code ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '200':
          description: Successfully read a postal code details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HitasPostalCode'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      description: Update a postal code
      operationId: update-postal-code
      tags:
        - Postal codes
      parameters:
        - name: postal_code_id
          required: true
          in: path
          description: Postal code ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HitasPostalCode'
      responses:
        '200':
          description: Successfully updated a postal code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HitasPostalCode'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      description: Remove a postal code
      operationId: delete-postal-code
      tags:
        - Postal codes
      parameters:
        - name: postal_code_id
          required: true
          in: path
          description: Postal code ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '204':
          description: Postal code successfully removed.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /api/v1/building-types:
    get:
      description: Fetch building types
      operationId: list-building-types
      tags:
        - Building types
      parameters:
        - $ref: '#/components/parameters/PagingLimitParameter'
        - $ref: '#/components/parameters/PagingPageParameter'
      responses:
        '200':
          description: Successfully fetched list of building types
          content:
            application/json:
              schema:
                description: Single page of building types
                type: object
                required:
                  - page
                  - contents
                properties:
                  page:
                    $ref: '#/components/schemas/PageInfo'
                  contents:
                    description: List of building types
                    type: array
                    items:
                      $ref: '#/components/schemas/Code'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      description: Add a new building type
      operationId: create-building-type
      tags:
        - Building types
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Code'
      responses:
        '201':
          description: Successfully added a new building type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/building-types/{building_type_id}:
    get:
      description: Fetch a single building type by id
      operationId: read-building-type
      tags:
        - Building types
      parameters:
        - name: building_type_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '200':
          description: Successfully read a building type details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      description: Update a building type
      operationId: update-building-type
      tags:
        - Building types
      parameters:
        - name: building_type_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Code'
      responses:
        '200':
          description: Successfully updated a building type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      description: Remove a building type
      operationId: delete-building-type
      tags:
        - Building types
      parameters:
        - name: building_type_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '204':
          description: Housing company successfully removed.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /api/v1/financing-methods:
    get:
      description: Fetch financing methods
      operationId: list-financing-methods
      tags:
        - Financing methods
      parameters:
        - $ref: '#/components/parameters/PagingLimitParameter'
        - $ref: '#/components/parameters/PagingPageParameter'
      responses:
        '200':
          description: Successfully fetched list of financing methods
          content:
            application/json:
              schema:
                description: Single page of financing methods
                type: object
                required:
                  - page
                  - contents
                properties:
                  page:
                    $ref: '#/components/schemas/PageInfo'
                  contents:
                    description: List of financing methods
                    type: array
                    items:
                      $ref: '#/components/schemas/Code'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      description: Add a new financing method
      operationId: create-financing-method
      tags:
        - Financing methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Code'
      responses:
        '201':
          description: Successfully added a new financing method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/financing-methods/{financing_method_id}:
    get:
      description: Fetch a single financing method by id
      operationId: read-financing-method
      tags:
        - Financing methods
      parameters:
        - name: financing_method_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '200':
          description: Successfully read a financing method details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      description: Update a financing method
      operationId: update-financing-method
      tags:
        - Financing methods
      parameters:
        - name: financing_method_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Code'
      responses:
        '200':
          description: Successfully updated a financing method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      description: Remove a financing method
      operationId: delete-financing-method
      tags:
        - Financing methods
      parameters:
        - name: financing_method_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '204':
          description: Housing company successfully removed.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /api/v1/apartment-types:
    get:
      description: Fetch apartment types
      operationId: list-apartment-types
      tags:
        - Apartment types
      parameters:
        - $ref: '#/components/parameters/PagingLimitParameter'
        - $ref: '#/components/parameters/PagingPageParameter'
      responses:
        '200':
          description: Successfully fetched list of apartment types
          content:
            application/json:
              schema:
                description: Single page of apartment types
                type: object
                required:
                  - page
                  - contents
                properties:
                  page:
                    $ref: '#/components/schemas/PageInfo'
                  contents:
                    description: List of apartment types
                    type: array
                    items:
                      $ref: '#/components/schemas/Code'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      description: Add a new apartment type
      operationId: create-apartment-type
      tags:
        - Apartment types
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Code'
      responses:
        '201':
          description: Successfully added a new apartment type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/apartment-types/{apartment_type_id}:
    get:
      description: Fetch a single apartment type by id
      operationId: read-apartment-type
      tags:
        - Apartment types
      parameters:
        - name: apartment_type_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '200':
          description: Successfully read a apartment type details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      description: Update a apartment type
      operationId: update-apartment-type
      tags:
        - Apartment types
      parameters:
        - name: apartment_type_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Code'
      responses:
        '200':
          description: Successfully updated a apartment type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      description: Remove a apartment type
      operationId: delete-apartment-type
      tags:
        - Apartment types
      parameters:
        - name: apartment_type_id
          required: true
          in: path
          description: Housing company ID
          schema:
            type: string
            example: a3181b8fa60b47df8ccba0d554a913bb
      responses:
        '204':
          description: Housing company successfully removed.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    PagingLimitParameter:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        format: int32
        default: 10
        minimum: 1
        maximum: 100
      description: Specifies how many results are returned per page

    PagingPageParameter:
      in: query
      name: page
      required: false
      schema:
        type: integer
        format: int32
        default: 1
        minimum: 1
      description: Specifies the index of the returned page

  schemas:
    PageInfo:
      description: Page metadata
      type: object
      properties:
        size:
          description: Size of the returned page
          type: integer
          format: int32
          minimum: 0
          example: 10
        total_items:
          description: Total items across all of the pages
          type: integer
          format: int32
          minimum: 0
          example: 100
        current_page:
          description: Current page number
          type: integer
          format: int32
          minimum: 1
          example: 1
        total_pages:
          description: Total number of pages
          type: integer
          format: int32
          minimum: 0
          example: 5
        links:
          description: Links to other pages
          type: object
          properties:
            next:
              description: Link to next page
              type: string
              nullable: true
              example: 'http://example.com/api/v1/housing-companies?page=4'
            previous:
              description: Link to previous page
              type: string
              nullable: true
              example: 'http://example.com/api/v1/housing-companies?page=2'
      required:
        - size
        - total_items
        - current_page
        - total_pages
        - links

    HousingCompany:
      description: Single housing company
      type: object
      required:
        - address
        - area
        - date
        - id
        - name
        - state
      properties:
        id:
          description: Housing company ID
          type: string
          example: a3181b8fa60b47df8ccba0d554a913bb
          readOnly: true
        name:
          description: Name of the housing company
          type: string
          example: Taloyhtiö Helmi
          maxLength: 1024
        state:
          $ref: '#/components/schemas/HousingCompanyState'
        address:
          $ref: '#/components/schemas/HitasHousingCompanyAddress'
        area:
          description: Hitas cost area information related to the housing company
          type: object
          readOnly: true
          required:
            - name
            - cost_area
          properties:
            name:
              description: Area name based on the postal code
              type: string
              example: Helsinki Keskusta - Etu-Töölö
            cost_area:
              description: Hitas cost area based on the postal code
              type: integer
              format: int32
              minimum: 1
              maximum: 4
              example: 1
        date:
          description: Year of first construction based on the housing company's earliest constructed apartment
          type: string
          format: date
          nullable: true
          readOnly: true

    HousingCompanyDetails:
      description: Single housing company's details
      type: object
      required:
        - address
        - area
        - date
        - id
        - name
        - state
        - business_id
        - real_estates
      properties:
        id:
          description: Housing company ID
          type: string
          example: a3181b8fa60b47df8ccba0d554a913bb
          readOnly: true
        name:
          description: Name information about the housing company
          type: object
          required:
            - official
            - display
          properties:
            official:
              description: Official name of the housing company. Better suited for official documents, etc.
              type: string
              maxLength: 1024
              example: As Oy Taloyhtiö Helmi
            display:
              description: Simpler form of official name. Better suited for displaying housing company's name
              type: string
              maxLength: 1024
              example: Taloyhtiö Helmi
        business_id:
          description: Official business ID
          type: string
          pattern: '^\d{7}-\d$'
          example: 1234567-8
        state:
          $ref: '#/components/schemas/HousingCompanyState'
        address:
          $ref: '#/components/schemas/HitasHousingCompanyAddress'
        area:
          description: Hitas cost area information related to the housing company
          type: object
          readOnly: true
          required:
            - name
            - cost_area
          properties:
            name:
              description: Area name based on the postal code
              type: string
              example: Helsinki Keskusta - Etu-Töölö
            cost_area:
              description: Hitas cost area based on the postal code
              type: integer
              format: int32
              minimum: 1
              maximum: 4
              example: 1
        date:
          description: Year of first construction based on the housing company's earliest constructed building
          type: string
          format: date
          nullable: true
          readOnly: true
        financing_method:
          allOf:
            - $ref: '#/components/schemas/Code'
            - $ref: '#/components/schemas/ReadOnlyCode'
        building_type:
          allOf:
            - $ref: '#/components/schemas/Code'
            - $ref: '#/components/schemas/ReadOnlyCode'
        developer:
          allOf:
            - $ref: '#/components/schemas/Code'
            - $ref: '#/components/schemas/ReadOnlyCode'
        property_manager:
          allOf:
            - $ref: '#/components/schemas/PropertyManager'
            - $ref: '#/components/schemas/ReadOnlyPropertyManager'
        acquisition_price:
          description: Acquisition price information
          type: object
          required:
            - initial
            - realized
          properties:
            initial:
              description: Initial acquisition price
              type: number
              format: float
              example: 112000.00
            realized:
              description: Realized acquisition price
              type: number
              format: float
              nullable: true
              example: 112000.00
        primary_loan:
          description: Primary loan
          type: number
          format: float
          nullable: true
          example: 112000.00
        sales_price_catalogue_confirmation_date:
          description: Sales price catalogue confirmation date
          type: string
          format: date
          nullable: true
        notification_date:
          description: Notification date
          type: string
          format: date
          nullable: true
          readOnly: true
        legacy_id:
          description: Old legacy ID for this housing company
          type: string
          readOnly: true
          nullable: true
        notes:
          description: Optional notes for this housing company
          type: string
          nullable: true
        last_modified:
          description: Last modified informatoin
          type: object
          readOnly: true
          required:
            - user
            - datetime
          properties:
            user:
              description: User who last modified this housing company
              type: object
              required:
                - username
                - first_name
                - last_name
              properties:
                user:
                  description: Username of this user
                  type: string
                  nullable: true
                  example: mameik01
                first_name:
                  description: First name of this user
                  type: string
                  nullable: true
                  example: Matti
                last_name:
                  description: Last name of this user
                  type: string
                  nullable: true
                  example: Meikäläinen
            datetime:
              description: When this housing company was last modified
              type: string
              format: date-time
        real_estates:
          description: List of real estates this housing company has
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/RealEstate'

    RealEstate:
      description: Single real estate
      type: object
      required:
        - id
        - property_identifier
        - address
        - buildings
      properties:
        id:
          description: ID of this building
          type: string
          readOnly: true
          example: c86eaa399ce141d89d962d46bb81ab2b
        property_identifier:
          description: This real estate's official property identifier
          type: string
          pattern: '^\d{1,4}-\d{1,4}-\d{1,4}-\d{1,4}$'
        address:
          $ref: '#/components/schemas/HitasAddress'
        buildings:
          description: List of buildings this real estate has
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Building'

    Building:
      description: Single building
      type: object
      required:
        - id
        - address
      properties:
        id:
          description: ID of this building
          type: string
          readOnly: true
          example: 9d0ac35b01eb44829bc84c25f7c1813a
        address:
          $ref: '#/components/schemas/HitasAddress'
        building_identifier:
          description: This building's official identifier
          type: string
          pattern: '^1\d{8}[A-Za-z0-9]$|^\d{1,4}-\d{1,4}-\d{1,4}-\d{1,4} [A-Za-z0-9] \d{3}$'
          nullable: true
          example: 100012345A

    MinimalHousingCompany:
      description: Housing company identifier
      type: object
      required:
        - id
        - name
      properties:
        id:
          description: Housing company ID
          type: string
          example: a3181b8fa60b47df8ccba0d554a913bb
          readOnly: true
        name:
          description: Name of the housing company
          type: string
          example: Taloyhtiö Helmi
          maxLength: 1024

    Apartment:
      description: Single apartment
      type: object
      required:
        - id
        - state
        - apartment_type
        - surface_area
        - address
        - apartment_number
        - completion_date
        - housing_company
        - owners
      properties:
        id:
          description: Apartment ID
          type: string
          example: a3181b8fa60b47df8ccba0d554a913bb
          readOnly: true
        state:
          $ref: '#/components/schemas/ApartmentState'
        apartment_type:
          type: string
          readOnly: true
        surface_area:
          description: Surface area of the apartment measured in square meters
          type: number
        address:
          $ref: '#/components/schemas/HitasAddress'
        apartment_number:
          type: number
        stair:
          type: string
        completion_date:
          description: Date that the apartment was completed on
          type: string
          format: date
          nullable: true
        housing_company:
          $ref: '#/components/schemas/MinimalHousingCompany'
        owners:
          description: List of apartment's owners
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Owner'

    ApartmentDetails:
      description: Single apartment details
      type: object
      required:
        - id
        - state
        - apartment_type
        - surface_area
        - address
        - apartment_number
        - completion_date
        - housing_company
        - owners
      properties:
        id:
          description: Apartment ID
          type: string
          example: a3181b8fa60b47df8ccba0d554a913bb
          readOnly: true
        state:
          $ref: '#/components/schemas/ApartmentState'
        apartment_type:
          allOf:
            - $ref: '#/components/schemas/Code'
            - $ref: '#/components/schemas/ReadOnlyCode'
        surface_area:
          description: Surface area of the apartment measured in square meters
          type: number
        share_number_start:
          type: integer
          nullable: true
        share_number_end:
          type: integer
          nullable: true
        address:
          $ref: '#/components/schemas/HitasAddress'
        apartment_number:
          type: number
        floor:
          description: Apartment floor number
          type: string
          maxLength: 50
          nullable: true
          example: "5"
        stair:
          type: string
        completion_date:
          description: Date that the apartment's building was completed on
          type: string
          format: date
          nullable: true
        debt_free_purchase_price:
          type: number
          nullable: true
        purchase_price:
          type: number
          nullable: true
        acquisition_price:
          type: number
          nullable: true
        primary_loan_amount:
          type: number
          nullable: true
        loans_during_construction:
          type: number
          nullable: true
        interest_during_construction:
          type: number
          nullable: true
        building:
          description: ID of the building this apartment belongs to
          type: string
          example: a3181b8fa60b47df8ccba0d554a913bb
          readOnly: true
        real_estate:
          description: ID of the real estate this apartment belongs to
          type: string
          example: a3181b8fa60b47df8ccba0d554a913bb
          readOnly: true
        housing_company:
          $ref: '#/components/schemas/MinimalHousingCompany'
        owners:
          description: List of apartment's owners
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Owner'
        notes:
          type: string
          nullable: true

    Owner:
      description: Owner information
      type: object
      required:
        - person
        - ownership_percentage
        - ownership_start_date
        - ownership_end_date
      properties:
        person:
          $ref: '#/components/schemas/Person'
        ownership_percentage:
          description: Percentage that the person owns of the apartment
          type: number
        ownership_start_date:
          description: Date owner took ownership of the apartment
          type: string
          format: date
          nullable: true
        ownership_end_date:
          description: Date owner released ownership of the apartment
          type: string
          format: date
          nullable: true

    Person:
      description: Owner information
      type: object
      required:
        - id
        - first_name
        - last_name
        - social_security_number
        - email
        - address
      properties:
        id:
          description: ID of this person
          type: string
          example: dc1072975bab4ba69f64814f021c6785
        first_name:
          description: First name(s) of this person
          type: string
          example: Martti
        last_name:
          description: Last name of this person
          type: string
          example: Virtanen
        social_security_number:
          description: Social security number of this person
          type: string
          example: 260969-420B
          nullable: true
        email:
          description: Email for this person
          type: string
          example: martti.virtanen@example.com
          nullable: true
        address:
          $ref: '#/components/schemas/Address'

    Address:
      description: Address information
      type: object
      required:
        - street_address
        - postal_code
        - city
      properties:
        street_address:
          description: Street address
          type: string
          example: Torikatu 16 B 4
        postal_code:
          description: Postal code
          type: string
          example: "90100"
        city:
          description: City
          type: string
          example: Oulu

    HitasPostalCode:
      description: Hitas postal code
      type: object
      required:
        - value
        - city
        - cost_area
      properties:
        value:
          description: Hitas postal code
          type: string
          example: "00100"
        city:
          description: City
          type: string
          example: Helsinki
        cost_area:
          description: City
          type: integer
          minimum: 1
          maximum: 4
          example: Helsinki

    HitasHousingCompanyAddress:
      description: Hitas address information for a housing company (includes postal code)
      type: object
      required:
        - street_address
        - postal_code
        - city
      properties:
        street_address:
          description: Street address
          type: string
          example: Hannunkatu 24
        postal_code:
          description: Hitas postal code
          type: string
          example: "00100"
        city:
          description: City based on the postal code
          type: string
          readOnly: true
          example: Helsinki

    HitasAddress:
      description: Hitas address information
      type: object
      required:
        - street_address
        - postal_code
        - city
      properties:
        street_address:
          description: Street address
          type: string
          example: Hannunkatu 24
        postal_code:
          description: Hitas postal code
          type: string
          readOnly: true
          example: "00100"
        city:
          description: City based on the postal code
          type: string
          readOnly: true
          example: Helsinki

    ReadOnlyCode:
      description: Read-only Hitas codebook entry
      properties:
        value:
          readOnly: true
        description:
          readOnly: true
        code:
          readOnly: true

    Code:
      description: Hitas codebook entry
      type: object
      required:
        - id
        - value
        - description
        - code
      properties:
        id:
          description: ID of this code
          type: string
          example: 21d25cc973d8450f8f89937b9eba0a04
        value:
          description: Value for this code
          type: string
          example: luhtitalo
        description:
          description: Description of this code
          type: string
          nullable: true
          example: This building type is for luhtitalo
        code:
          description: Code number
          type: string
          example: 001

    ReadOnlyPropertyManager:
      description: Property manager information
      properties:
        name:
          readOnly: true
        email:
          readOnly: true
        address:
          readOnly: true

    PropertyManager:
      description: Property manager information
      type: object
      required:
        - id
        - name
        - email
        - address
      properties:
        id:
          description: ID of this property manager
          type: string
          example: dc1072975bab4ba69f64814f021c6785
        name:
          description: Name of this property manager
          type: string
          example: Ismo Isännöitsijät Oy
        email:
          description: Email for this property manager
          type: string
          example: ismo@example.com
        address:
          $ref: '#/components/schemas/Address'

    HousingCompanyState:
      description: |-
        Housing company state

        Can have the following values:
        - not_ready
        - lt_30_years
        - gt_30_years_not_free
        - gt_30_years_free
        - gt_30_years_plot_department_notification
        - half_hitas
        - ready_no_statistics
      type: string
      example: gt_30_years_not_free
      x-extensible-enum:
        - not_ready
        - lt_30_years
        - gt_30_years_not_free
        - gt_30_years_free
        - gt_30_years_plot_department_notification
        - half_hitas
        - ready_no_statistics

    ApartmentState:
      description: |-
        Apartment state

        Can have the following values:
        - free
        - reserved
        - sold
      type: string
      example: sold
      x-extensible-enum:
        - free
        - reserved
        - sold

    # Errors

    BadRequestError:
      description: Bad request error
      type: object
      required:
        - status
        - reason
        - message
        - error
      properties:
        status:
          description: Error code
          type: integer
          example: 400
          enum: [400]
        reason:
          description: Error phrase
          type: string
          example: "Bad Request"
          enum: ["Bad Request"]
        message:
          description: Human-readable details about the error
          type: string
          example: Request could not be processed due to malformed request
        error:
          description: |-
            Error reason

            Can have the following values:
            - bad_request
          type: string
          example: bad_request
          x-extensible-enum:
            - bad_request
        fields:
          description: Details about specific validation failures on specific fields
          type: array
          items:
            description: Single field validation details
            type: object
            required:
              - field
              - message
            properties:
              field:
                description: Name of the field
                type: string
                example: name
              message:
                description: Error message with details about the failure
                type: string
                example: Length exceeds maximum length of 50

    NotFoundError:
      description: Not found error
      type: object
      required:
        - status
        - reason
        - message
        - error
      properties:
        status:
          description: Error code
          type: integer
          enum: [404]
          example: 404
        reason:
          description: Error phrase
          type: string
          enum: ["Not Found"]
          example: Not Found
        message:
          description: Human-readable details about the error
          type: string
          example: Housing company not found
        error:
          description: |-
            Error reason

            Can have the following values:
            - housing_company_not_found
            - housing_company_property_not_found
            - housing_company_building_not_found
            - postal_code_not_found
          type: string
          example: housing_company_not_found
          x-extensible-enum:
            - housing_company_not_found
            - housing_company_property_not_found
            - housing_company_building_not_found
            - postal_code_not_found

    NotAcceptableError:
      description: Not acceptable error
      type: object
      required:
        - status
        - reason
        - message
        - error
      properties:
        status:
          description: Error code
          type: integer
          enum: [406]
          example: 406
        reason:
          description: Error phrase
          type: string
          enum: ["Not Acceptable"]
          example: Not Acceptable
        message:
          description: Human-readable details about the error
          type: string
          example: Only 'application/json' Content-Type is supported.
        error:
          description: Error reason
          type: string
          enum: [not_acceptable]
          example: not_acceptable

    UnsupportedMediaTypeError:
      description: Unsupported media type error
      type: object
      required:
        - status
        - reason
        - message
        - error
      properties:
        status:
          description: Error code
          type: integer
          enum: [415]
          example: 415
        reason:
          description: Error phrase
          type: string
          enum: ["Unsupported Media Type"]
          example: Unsupported Media Type
        message:
          description: Human-readable details about the error
          type: string
          example: Only 'application/json' Content-Type is supported.
        error:
          description: Error reason
          type: string
          enum: [unsupported_media_type]
          example: unsupported_media_type

    InternalServerError:
      type: object
      description: Internal server error
      required:
        - status
        - reason
        - message
        - error
      properties:
        status:
          description: Error code
          type: integer
          enum: [500]
          example: 500
        reason:
          description: Error phrase
          type: string
          example: Internal Server Error
        message:
          description: Human-readable details about the error
          type: string
          example: Unexpected internal server error occurred
        error:
          description: Error reason
          type: string
          enum: [internal_server_error]
          example: internal_server_error

  responses:

    BadRequest:
      description: The request was malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
          example:
            status: 400
            reason: Bad Request
            error: bad_request
            details: Some fields failed validation
            fields:
              - field: name
                message: Length exceeds maximum length of 50
              - field: age
                message: Age must be within range [0, 200]
              - field: email
                message: Email is required

    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
          example:
            status: 404
            reason: Not Found
            error: housing_company_not_found
            message: Housing company not found

    UnsupportedMediaType:
      description: Only 'application/json' content-type is supported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnsupportedMediaTypeError'
          example:
            status: 415
            reason: Unsupported Media Type
            error: unsupported_media_type
            message: Only 'application/json' Content-Type is supported.

    NotAcceptable:
      description: Only 'application/json' content-type is supported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAcceptableError'
          example:
            status: 405
            reason: Not Acceptable
            error: not_acceptable
            message: Only 'application/json' Content-Type is supported.

    InternalServerError:
      description: Unexpected internal server error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'
          example:
            status: 500
            reason: Internal Server Error
            error: internal_server_error
            message: Unexpected internal server error occurred
