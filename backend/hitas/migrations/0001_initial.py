# Generated by Django 3.2.18 on 2023-05-17 07:50

import uuid
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import django.db.models.expressions
import django.db.models.manager
import django.utils.timezone
import enumfields.fields
from django.conf import settings
from django.db import migrations, models
from django.utils.translation import gettext_lazy as _
from enumfields import Enum

import hitas.models._base
import hitas.models.apartment
import hitas.models.condition_of_sale
import hitas.models.housing_company
import hitas.models.job_performance
import hitas.models.thirty_year_regulation
import hitas.models.utils
import hitas.types


class HousingCompanyState(Enum):
    NOT_READY = "not_ready"
    LESS_THAN_30_YEARS = "lt_30_years"
    GREATER_THAN_30_YEARS_NOT_FREE = "gt_30_years_not_free"
    GREATER_THAN_30_YEARS_FREE = "gt_30_years_free"
    GREATER_THAN_30_YEARS_PLOT_DEPARTMENT_NOTIFICATION = "gt_30_years_plot_department_notification"
    HALF_HITAS = "half_hitas"
    READY_NO_STATISTICS = "ready_no_statistics"

    class Labels:
        NOT_READY = _("Not Ready")
        LESS_THAN_30_YEARS = _("Less than 30 years")
        GREATER_THAN_30_YEARS_NOT_FREE = _("Greater than 30 years, not free")
        GREATER_THAN_30_YEARS_FREE = _("Greater than 30 years, free")
        GREATER_THAN_30_YEARS_PLOT_DEPARTMENT_NOTIFICATION = _("Greater than 30 years, plot department notification")
        HALF_HITAS = _("Half hitas")  # Puolihitas
        READY_NO_STATISTICS = _("Ready, no statistics")


class ApartmentState(Enum):
    FREE = "free"
    RESERVED = "reserved"
    SOLD = "sold"

    class Labels:
        FREE = _("Free")
        RESERVED = _("Reserved")
        SOLD = _("Sold")


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Apartment",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                (
                    "share_number_start",
                    models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1)]),
                ),
                (
                    "share_number_end",
                    models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1)]),
                ),
                ("completion_date", models.DateField(null=True)),
                ("street_address", models.CharField(max_length=128)),
                ("stair", models.CharField(max_length=16)),
                ("apartment_number", models.PositiveSmallIntegerField()),
                ("floor", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "surface_area",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                ("rooms", models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1)])),
                (
                    "catalog_purchase_price",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                (
                    "catalog_primary_loan_amount",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                (
                    "additional_work_during_construction",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                (
                    "loans_during_construction",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                (
                    "interest_during_construction_6",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                (
                    "interest_during_construction_14",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                (
                    "debt_free_purchase_price_during_construction",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "state",
                    enumfields.fields.EnumField(default="free", enum=ApartmentState, max_length=10, null=True),
                ),
            ],
            options={
                "verbose_name": "Apartment",
                "verbose_name_plural": "Apartments",
                "ordering": ["id"],
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ApartmentConstructionPriceImprovement",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("name", models.CharField(max_length=128)),
                ("completion_date", models.DateField()),
                (
                    "value",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "depreciation_percentage",
                    enumfields.fields.EnumField(
                        default=Decimal("10.0"), enum=hitas.models.apartment.DepreciationPercentage, max_length=10
                    ),
                ),
            ],
            options={
                "ordering": ["completion_date", "id"],
                "abstract": False,
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ApartmentMarketPriceImprovement",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("name", models.CharField(max_length=128)),
                ("completion_date", models.DateField()),
                (
                    "value",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                ("no_deductions", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["completion_date", "id"],
                "abstract": False,
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ApartmentMaximumPriceCalculation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_created=True)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("confirmed_at", models.DateTimeField(null=True)),
                ("calculation_date", models.DateField()),
                ("valid_until", models.DateField()),
                (
                    "maximum_price",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                ("json", models.JSONField(encoder=hitas.types.HitasEncoder, null=True)),
                (
                    "json_version",
                    models.SmallIntegerField(
                        default=5, null=True, validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
            ],
            options={
                "verbose_name": "Apartment maximum price calculation",
                "verbose_name_plural": "Apartment maximum price calculations",
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ApartmentSale",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("notification_date", models.DateField()),
                ("purchase_date", models.DateField()),
                (
                    "purchase_price",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                (
                    "apartment_share_of_housing_company_loans",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                ("exclude_from_statistics", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Apartment sale",
                "verbose_name_plural": "Apartment sales",
                "ordering": ["-purchase_date"],
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ApartmentType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("value", models.CharField(max_length=1024)),
                ("description", models.TextField(blank=True)),
                ("in_use", models.BooleanField(default=True)),
                ("order", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("legacy_code_number", models.CharField(max_length=12, null=True)),
                ("legacy_start_date", models.DateTimeField(default=django.utils.timezone.now)),
                ("legacy_end_date", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Apartment type",
                "verbose_name_plural": "Apartment types",
                "ordering": ["order", "id"],
                "abstract": False,
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Building",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("street_address", models.CharField(max_length=1024)),
                (
                    "building_identifier",
                    models.CharField(
                        blank=True,
                        help_text="Format: 100012345A or 91-17-16-1 S 001",
                        max_length=25,
                        null=True,
                        validators=[hitas.models.utils.validate_building_id],
                    ),
                ),
            ],
            options={
                "verbose_name": "Building",
                "verbose_name_plural": "Buildings",
                "ordering": ["id"],
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="BuildingType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("value", models.CharField(max_length=1024)),
                ("description", models.TextField(blank=True)),
                ("in_use", models.BooleanField(default=True)),
                ("order", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("legacy_code_number", models.CharField(max_length=12, null=True)),
                ("legacy_start_date", models.DateTimeField(default=django.utils.timezone.now)),
                ("legacy_end_date", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Building type",
                "verbose_name_plural": "Building types",
                "ordering": ["order", "id"],
                "abstract": False,
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ConditionOfSale",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                (
                    "grace_period",
                    enumfields.fields.EnumField(
                        default="not_given", enum=hitas.models.condition_of_sale.GracePeriod, max_length=12
                    ),
                ),
            ],
            options={
                "verbose_name": "Condition of Sale",
                "verbose_name_plural": "Conditions of Sale",
                "ordering": ["id"],
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ConstructionPriceIndex",
            fields=[
                ("month", models.DateField(primary_key=True, serialize=False)),
                (
                    "value",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
            ],
            options={
                "verbose_name": "Construction price index for apartments constructed before January 2011",
                "verbose_name_plural": "Construction price indices for apartments constructed before January 2011",
            },
        ),
        migrations.CreateModel(
            name="ConstructionPriceIndex2005Equal100",
            fields=[
                ("month", models.DateField(primary_key=True, serialize=False)),
                (
                    "value",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
            ],
            options={
                "verbose_name": "Construction price index year for apartments constructed in January 2005 onwards",
                "verbose_name_plural": "Construction price indices for apartments constructed in January 2005 onwards",
            },
        ),
        migrations.CreateModel(
            name="Developer",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("value", models.CharField(max_length=1024)),
                ("description", models.TextField(blank=True)),
                ("in_use", models.BooleanField(default=True)),
                ("order", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("legacy_code_number", models.CharField(max_length=12, null=True)),
                ("legacy_start_date", models.DateTimeField(default=django.utils.timezone.now)),
                ("legacy_end_date", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Developer",
                "verbose_name_plural": "Developers",
                "ordering": ["order", "id"],
                "abstract": False,
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ExternalSalesData",
            fields=[
                ("calculation_quarter", models.CharField(max_length=6, primary_key=True, serialize=False)),
                ("quarter_1", models.JSONField()),
                ("quarter_2", models.JSONField()),
                ("quarter_3", models.JSONField()),
                ("quarter_4", models.JSONField()),
            ],
            options={
                "verbose_name": "External sales data",
                "verbose_name_plural": "External sales datas",
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="FinancingMethod",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("value", models.CharField(max_length=1024)),
                ("description", models.TextField(blank=True)),
                ("in_use", models.BooleanField(default=True)),
                ("order", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("legacy_code_number", models.CharField(max_length=12, null=True)),
                ("legacy_start_date", models.DateTimeField(default=django.utils.timezone.now)),
                ("legacy_end_date", models.DateTimeField(blank=True, null=True)),
                ("include_in_statistics", models.BooleanField(default=True)),
                ("old_hitas_ruleset", models.BooleanField(default=False)),
                ("half_hitas", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Financing method",
                "verbose_name_plural": "Financing methods",
                "ordering": ["order", "id"],
                "abstract": False,
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="HitasPostalCode",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("value", models.CharField(max_length=5, unique=True)),
                ("city", models.CharField(default="Helsinki", max_length=1024)),
                (
                    "cost_area",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(4),
                            django.core.validators.MinValueValidator(1),
                        ]
                    ),
                ),
            ],
            options={
                "verbose_name": "Postal code",
                "verbose_name_plural": "Postal codes",
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="HousingCompany",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("official_name", models.CharField(max_length=1024, unique=True)),
                ("display_name", models.CharField(max_length=1024, unique=True)),
                (
                    "business_id",
                    models.CharField(
                        help_text="Format: 1234567-1",
                        max_length=9,
                        null=True,
                        validators=[hitas.models.utils.validate_business_id],
                    ),
                ),
                ("street_address", models.CharField(max_length=1024)),
                ("hitas_type", enumfields.fields.EnumField(enum=hitas.models.housing_company.HitasType, max_length=20)),
                (
                    "regulation_status",
                    enumfields.fields.EnumField(
                        default="regulated", enum=hitas.models.housing_company.RegulationStatus, max_length=27
                    ),
                ),
                (
                    "state",
                    enumfields.fields.EnumField(default="not_ready", enum=HousingCompanyState, max_length=40),
                ),
                ("exclude_from_statistics", models.BooleanField(default=False)),
                (
                    "acquisition_price",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                (
                    "primary_loan",
                    hitas.models._base.HitasModelDecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("sales_price_catalogue_confirmation_date", models.DateField(blank=True, null=True)),
                ("legacy_release_date", models.DateField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Housing company",
                "verbose_name_plural": "Housing companies",
                "ordering": ["id"],
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="HousingCompanyConstructionPriceImprovement",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("name", models.CharField(max_length=128)),
                ("completion_date", models.DateField()),
                (
                    "value",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
            ],
            options={
                "ordering": ["completion_date", "id"],
                "abstract": False,
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="HousingCompanyMarketPriceImprovement",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("name", models.CharField(max_length=128)),
                ("completion_date", models.DateField()),
                (
                    "value",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                ("no_deductions", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["completion_date", "id"],
                "abstract": False,
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="JobPerformance",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "source",
                    enumfields.fields.EnumField(enum=hitas.models.job_performance.JobPerformanceSource, max_length=21),
                ),
                ("request_date", models.DateField(editable=False)),
                ("delivery_date", models.DateField(editable=False)),
            ],
            options={
                "verbose_name": "Job performance",
                "verbose_name_plural": "Job performances",
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="MarketPriceIndex",
            fields=[
                ("month", models.DateField(primary_key=True, serialize=False)),
                (
                    "value",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
            ],
            options={
                "verbose_name": "Market price index for apartments constructed before January 2011",
                "verbose_name_plural": "Market price indices for apartment constructed before January 2011",
            },
        ),
        migrations.CreateModel(
            name="MarketPriceIndex2005Equal100",
            fields=[
                ("month", models.DateField(primary_key=True, serialize=False)),
                (
                    "value",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
            ],
            options={
                "verbose_name": "Market price index for apartments constructed in January 2011 onwards",
                "verbose_name_plural": "Market price indices for apartment constructed in January 2011 onwards",
            },
        ),
        migrations.CreateModel(
            name="MaximumPriceIndex",
            fields=[
                ("month", models.DateField(primary_key=True, serialize=False)),
                (
                    "value",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
            ],
            options={
                "verbose_name": "Maximum price index",
                "verbose_name_plural": "Maximum price indices",
            },
        ),
        migrations.CreateModel(
            name="MigrationDone",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("when", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Owner",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("name", models.CharField(blank=True, max_length=256)),
                ("identifier", models.CharField(blank=True, max_length=11, null=True)),
                ("valid_identifier", models.BooleanField(default=False)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("bypass_conditions_of_sale", models.BooleanField(default=False)),
                ("non_disclosure", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Owner",
                "verbose_name_plural": "Owners",
                "ordering": ["id"],
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="PropertyManager",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("name", models.CharField(max_length=1024)),
                ("email", models.EmailField(max_length=254)),
                ("street_address", models.CharField(max_length=1024)),
                ("postal_code", models.CharField(max_length=5)),
                ("city", models.CharField(max_length=1024)),
            ],
            options={
                "verbose_name": "Property manager",
                "verbose_name_plural": "Property managers",
                "ordering": ["id"],
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="SurfaceAreaPriceCeiling",
            fields=[
                ("month", models.DateField(primary_key=True, serialize=False)),
                (
                    "value",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
            ],
            options={
                "verbose_name": "Surface area price ceiling",
                "verbose_name_plural": "Surface area price ceiling",
            },
        ),
        migrations.CreateModel(
            name="SurfaceAreaPriceCeilingCalculationData",
            fields=[
                ("calculation_month", models.DateField(primary_key=True, serialize=False)),
                ("data", models.JSONField()),
            ],
            options={
                "verbose_name": "Surface area price ceiling calculation data",
                "verbose_name_plural": "Surface area price ceiling calculation data",
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ThirtyYearRegulationResults",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("calculation_month", models.DateField(unique=True)),
                ("regulation_month", models.DateField()),
                (
                    "surface_area_price_ceiling",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                ("sales_data", models.JSONField()),
                ("replacement_postal_codes", models.JSONField()),
            ],
            options={
                "verbose_name": "Thirty Year Regulation Results",
                "verbose_name_plural": "Thirty Year Regulation Results",
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ThirtyYearRegulationResultsRow",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("completion_date", models.DateField()),
                (
                    "surface_area",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                ("postal_code", models.CharField(max_length=5)),
                (
                    "realized_acquisition_price",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                (
                    "unadjusted_average_price_per_square_meter",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                (
                    "adjusted_average_price_per_square_meter",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                (
                    "completion_month_index",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                (
                    "calculation_month_index",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                    ),
                ),
                (
                    "regulation_result",
                    enumfields.fields.EnumField(
                        enum=hitas.models.thirty_year_regulation.RegulationResult, max_length=24
                    ),
                ),
                ("letter_fetched", models.BooleanField(default=False)),
                (
                    "housing_company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="+", to="hitas.housingcompany"
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rows",
                        to="hitas.thirtyyearregulationresults",
                    ),
                ),
            ],
            options={
                "verbose_name": "Thirty Year Regulation Results Row",
                "verbose_name_plural": "Thirty Year Regulation Results Rows",
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="RealEstate",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                (
                    "property_identifier",
                    models.CharField(
                        help_text="Format: 1234-1234-1234-1234",
                        max_length=19,
                        null=True,
                        validators=[hitas.models.utils.validate_property_id],
                    ),
                ),
                (
                    "housing_company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="real_estates",
                        to="hitas.housingcompany",
                    ),
                ),
            ],
            options={
                "verbose_name": "Real estate",
                "verbose_name_plural": "Real estates",
                "ordering": ["id"],
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Ownership",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                (
                    "percentage",
                    hitas.models._base.HitasModelDecimalField(
                        decimal_places=2,
                        editable=False,
                        max_digits=15,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0")),
                            django.core.validators.MaxValueValidator(Decimal("100")),
                        ],
                    ),
                ),
                ("conditions_of_sale", models.ManyToManyField(through="hitas.ConditionOfSale", to="hitas.Ownership")),
                (
                    "owner",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ownerships",
                        to="hitas.owner",
                    ),
                ),
                (
                    "sale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ownerships",
                        to="hitas.apartmentsale",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ownership",
                "verbose_name_plural": "Ownerships",
                "ordering": ["id"],
            },
            bases=(hitas.models._base.PostFetchModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddConstraint(
            model_name="maximumpriceindex",
            constraint=models.CheckConstraint(
                condition=models.Q(("value__gt", 0)), name="maximum_price_index_value_positive"
            ),
        ),
        migrations.AddConstraint(
            model_name="marketpriceindex2005equal100",
            constraint=models.CheckConstraint(
                condition=models.Q(("value__gt", 0)), name="market_price_2005_index_value_positive"
            ),
        ),
        migrations.AddConstraint(
            model_name="marketpriceindex",
            constraint=models.CheckConstraint(
                condition=models.Q(("value__gt", 0)), name="market_price_index_value_positive"
            ),
        ),
        migrations.AddField(
            model_name="jobperformance",
            name="user",
            field=models.ForeignKey(
                editable=False,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="job_performances",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="housingcompanymarketpriceimprovement",
            name="housing_company",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="market_price_improvements",
                to="hitas.housingcompany",
            ),
        ),
        migrations.AddField(
            model_name="housingcompanyconstructionpriceimprovement",
            name="housing_company",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="construction_price_improvements",
                to="hitas.housingcompany",
            ),
        ),
        migrations.AddField(
            model_name="housingcompany",
            name="building_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, related_name="housing_companies", to="hitas.buildingtype"
            ),
        ),
        migrations.AddField(
            model_name="housingcompany",
            name="developer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, related_name="housing_companies", to="hitas.developer"
            ),
        ),
        migrations.AddField(
            model_name="housingcompany",
            name="financing_method",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="housing_companies",
                to="hitas.financingmethod",
            ),
        ),
        migrations.AddField(
            model_name="housingcompany",
            name="postal_code",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="housing_companies",
                to="hitas.hitaspostalcode",
            ),
        ),
        migrations.AddField(
            model_name="housingcompany",
            name="property_manager",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="housing_companies",
                to="hitas.propertymanager",
            ),
        ),
        migrations.AddConstraint(
            model_name="constructionpriceindex2005equal100",
            constraint=models.CheckConstraint(
                condition=models.Q(("value__gt", 0)), name="construction_price_2005_index_value_positive"
            ),
        ),
        migrations.AddConstraint(
            model_name="constructionpriceindex",
            constraint=models.CheckConstraint(
                condition=models.Q(("value__gt", 0)), name="construction_price_index_value_positive"
            ),
        ),
        migrations.AddField(
            model_name="conditionofsale",
            name="new_ownership",
            field=models.ForeignKey(
                editable=False,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="conditions_of_sale_new",
                to="hitas.ownership",
            ),
        ),
        migrations.AddField(
            model_name="conditionofsale",
            name="old_ownership",
            field=models.ForeignKey(
                editable=False,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="conditions_of_sale_old",
                to="hitas.ownership",
            ),
        ),
        migrations.AddField(
            model_name="building",
            name="real_estate",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, related_name="buildings", to="hitas.realestate"
            ),
        ),
        migrations.AddField(
            model_name="apartmentsale",
            name="apartment",
            field=models.ForeignKey(
                editable=False, on_delete=django.db.models.deletion.CASCADE, related_name="sales", to="hitas.apartment"
            ),
        ),
        migrations.AddField(
            model_name="apartmentmaximumpricecalculation",
            name="apartment",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="max_price_calculations", to="hitas.apartment"
            ),
        ),
        migrations.AddField(
            model_name="apartmentmarketpriceimprovement",
            name="apartment",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="market_price_improvements",
                to="hitas.apartment",
            ),
        ),
        migrations.AddField(
            model_name="apartmentconstructionpriceimprovement",
            name="apartment",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="construction_price_improvements",
                to="hitas.apartment",
            ),
        ),
        migrations.AddField(
            model_name="apartment",
            name="apartment_type",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="apartments",
                to="hitas.apartmenttype",
            ),
        ),
        migrations.AddField(
            model_name="apartment",
            name="building",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, related_name="apartments", to="hitas.building"
            ),
        ),
        migrations.AddConstraint(
            model_name="ownership",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted__isnull", True)),
                fields=("sale", "owner"),
                name="hitas_ownership_single_ownership_for_sale_per_owner",
            ),
        ),
        migrations.AddConstraint(
            model_name="housingcompany",
            constraint=models.CheckConstraint(
                condition=models.Q(("acquisition_price__gte", 0)), name="acquisition_price_positive"
            ),
        ),
        migrations.AddConstraint(
            model_name="conditionofsale",
            constraint=models.CheckConstraint(
                condition=models.Q(("new_ownership", django.db.models.expressions.F("old_ownership")), _negated=True),
                name="hitas_conditionofsale_no_circular_reference",
            ),
        ),
        migrations.AddConstraint(
            model_name="conditionofsale",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted__isnull", True)),
                fields=("new_ownership", "old_ownership"),
                name="hitas_conditionofsale_only_one_valid_condition_of_sale",
            ),
        ),
        migrations.AddConstraint(
            model_name="apartment",
            constraint=models.CheckConstraint(
                condition=models.Q(("share_number_start__gte", 1)), name="hitas_apartment_share_number_start_gte_1"
            ),
        ),
        migrations.AddConstraint(
            model_name="apartment",
            constraint=models.CheckConstraint(
                condition=models.Q(("share_number_end__gte", 1)), name="hitas_apartment_share_number_end_gte_1"
            ),
        ),
        migrations.AddConstraint(
            model_name="apartment",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("share_number_end__isnull", False), ("share_number_start__isnull", False)),
                    models.Q(("share_number_end__isnull", True), ("share_number_start__isnull", True)),
                    _connector="OR",
                ),
                name="hitas_apartment_share_number_both_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="apartment",
            constraint=models.CheckConstraint(
                condition=models.Q(("share_number_end__gte", django.db.models.expressions.F("share_number_start"))),
                name="hitas_apartment_share_number_start_lte_share_number_end",
            ),
        ),
        migrations.AddConstraint(
            model_name="apartment",
            constraint=models.CheckConstraint(
                condition=models.Q(("surface_area__gte", 0)), name="hitas_apartment_surface_area_gte_0"
            ),
        ),
    ]
