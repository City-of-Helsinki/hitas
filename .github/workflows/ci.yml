name: "Hitas CI"

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  frontend:
    name: "Frontend checks"
    runs-on: ubuntu-latest

    steps:
    - name: "Checkout code"
      uses: actions/checkout@v3

    - name: "Frontend - Set Node.js 16.x"
      uses: actions/setup-node@v3
      with:
        node-version: 16.x

    - name: "Frontend - Install dependencies"
      uses: borales/actions-yarn@v4
      with:
        dir: 'frontend'
        cmd: install

    - name: "Frontend - Check for ESLint issues"
      uses: borales/actions-yarn@v4
      with:
        dir: 'frontend'
        cmd: eslint-check

    - name: "Frontend - Check for Prettier issues"
      uses: borales/actions-yarn@v4
      with:
        dir: 'frontend'
        cmd: prettier-check

    - name: "Test for building frontend"
      run: >
        cd frontend
        && docker build .

  backend:
    name: "Backend checks"
    runs-on: ubuntu-latest
    env:
      POETRY_VERSION: 1.3.1
      POETRY_VIRTUALENVS_CREATE: 0
      POETRY_HOME: ~/.local
      POETRY_CACHE_DIR: ~/.cache/pypoetry
      PRE_COMMIT_HOME: ~/.cache/pre-commit
      SECRET_KEY: xxx
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/github_actions

    # Majority of the tests require database
    services:
      postgres:
        image: postgres:13.7
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: "Checkout code"
      uses: actions/checkout@v3

    - name: "Set up Python 3.10"
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: "Load cached dependencies and pre-commit hooks"
      id: cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.POETRY_HOME }}
          ${{ env.POETRY_CACHE_DIR }}
          ${{ env.PRE_COMMIT_HOME }}
        # Invalidate cache if pre-commit changes, dependencies changes, or poetry version changes
        # Can also manually override cache by changing "cache-v1" version.
        key: cache-v1-${{ hashFiles('**/poetry.lock', '**/.pre-commit-config.yaml') }}-${{ env.POETRY_VERSION }}

    - name: "Install Poetry"
      if: steps.cache.outputs.cache-hit != 'true'
      run: curl -sSL https://install.python-poetry.org | python -

    - name: "Add poetry install directory to path"
      run: echo "${{ env.POETRY_HOME }}" >> $GITHUB_PATH

    - name: "Install dependencies"
      if: steps.cache.outputs.cache-hit != 'true'
      run: >
        cd backend
        && poetry install --no-root

    - name: "Run pre-commit hooks against all files"
      if: steps.cache.outputs.cache-hit != 'true'
      run: >
        cd backend
        && pre-commit run --all-files

    - name: "Run tests"
      run: >
        cd backend
        && pytest -vvv --cov=. .

    - name: "Test for migration issues"
      run: >
        cd backend
        && ./manage.py makemigrations --check --no-color --no-input --dry-run

    - name: "Test for building backend"
      run: >
        cd backend
        && docker build .
